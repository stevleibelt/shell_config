####
# https://www.gnu.org/software/bash/manual/bash.html
####

#####
# If one value is given, mkdir -p plus cd is called.
# If multiple values are given. mkdir is called.
#
# @param string $# - string name of directory you want to create
#
# @author stev leibelt
# @since 2013-01-05
####
function net_bazzline_mkdir ()
{
    #check if at least one argument is supplied
    if [[ $# -eq 0 ]]; then
        echo "No arguments supplied"
        return 1
    fi

    #if one argument is supplied, create dir and
    # change to it
    if [[ $# -eq 1 ]]; then
        mkdir -p "$1" 
        cd "$1"
        return 0
    fi

    #if more then one argument is supplied
    # execute default mkdir
    if [[ $# -gt 1 ]]; then
        mkdir $@
        return 0
    fi
}

####
# create a directory with a prefix of current date (Ymd)
#
# @param string $1 - directory name you want to create
#
# @author stev leibelt
# @since 2013-03-08
####
function net_bazzline_mkdirPrefixCurrentDate ()
{
    if [[ $# -eq 1 ]]; then
        directoryName=`eval date +%y%m%d`"_$1"

        net_bazzline_mkdir "$directoryName"
    else
        echo 'Should be called with exactly one parameter'
    fi
}

#####
# You can change $i levels by using cd $i
#
# @param mixed $1 - [optional] path where you want do change
#                       or number of directories you want to
#                       change upwards - default is $HOME
#
# @author stev leibelt
# @since 2013-01-30
####
function net_bazzline_cd ()
{
    #is numeric value?
    if [[ $# -eq 0 ]]; then 
        cd "$HOME"
    elif [[ `expr $1 + 1 2> /dev/null` ]]; then
        for (( i=1; i <= $1; i++))
        do
            cd ..
        done
    else
        cd "$1"
    fi
}

#####
# Combines ps aux and grep
#
# @param string $1 - pattern your are searching for
#
# @author stev leibelt
# @since 2013-01-30
####
function net_bazzline_psgrep ()
{
    if [[ $# -eq 1 ]]; then
        ps aux | grep "$1"
    fi
}

#####
# Calls svn diff for two repositories.
# Call $repositoryUrlOne $repositoryUrlTwo $filePath
# Use --summarize as default, so only filenames are shown
#
# @param string $1 - first repository
# @param string $2 - second repository
# @param string $3 - path of file to diff
# [@param string $4 - if set, summarize is disabled]
#
# @author stev leibelt
# @since 2013-01-30
####
function net_bazzline_svn_diff ()
{
    if [[ $# -eq 3 ]]; then
        svn diff --summarize "$1""/""$3" "$2""/""$3"
    elif [[ $# -eq 4 ]]; then
        svn diff "$1""/""$3" "$2""/""$3"
    else
        echo 'No valid arguments supplied'
        echo 'repositoryUrlOne repositoryUrlTwo filePath [disableSummerize]'
    fi
}

####
# creates tar archvie
#
# @param string $1 - archvie name
# @param string $@ - paths
#
# @author stev leibelt
# @since 2013-07-19
####
function net_bazzline_tar_create ()
{
    if [[ $# -lt 2 ]]; then
        echo 'No valid arguments supplied.'
        echo 'archive path1 [pathX]'

        exit 1
    fi

    FILENAME="$1"

    # remove $1
    shift

    tar -cf $FILENAME "$@"
}

####
# lists content of a tar archvie
#
# @param string $1 - archvie name
#
# @author stev leibelt
# @since 2013-07-19
####
function net_bazzline_tar_list ()
{
    if [[ $# -eq 1 ]]; then
        tar -tvf "$1"
    else
        echo 'No valid arguments supplied.'
        echo 'archive'

        exit 1
    fi
}

####
# extract content of a tar archvie
#
# @param string $1 - archvie name
#
# @author stev leibelt
# @since 2013-07-19
####
function net_bazzline_tar_extract ()
{
    if [[ $# -eq 1 ]]; then
        tar -xf "$1"
    else
        echo 'No valid arguments supplied.'
        echo 'archive'

        exit 1
    fi
}

####
# compress given directories into tar.gz
#
# @param string $1 - compressed tar.gz file name
# @param string $@ - [all following] files for compressed file
#
# @author stev leibelt
# @since 2013-02-02
####
function net_bazzline_compress ()
{
    if [[ $# -lt 1 ]]; then
        echo 'No valid arguments supplied.'

        exit 1
    fi

    FILENAME_TAR="$1".tar.gz

    if [[ $# -gt 1 ]]; then
        shift
    fi

    tar --ignore-failed-read -zcf "$FILENAME_TAR" "$@"
}

####
# compress given directories into tar.gz
#
# @param string $1 - path to compressed tar.gz file
# @param string $2 - [optional] output path - default is name of the file
#
# @author stev leibelt
# @since 2013-02-02
####
function net_bazzline_decompress ()
{
    if [[ $# -lt 1 ]]; then
        echo 'No valid arguments supplied.'
        echo 'Try net_bazzline_decompress $nameOfCompressedFile [$pathToDecompress]'

        exit 1
    fi

    if [[ $# -eq 1 ]]; then
        tar -zxf "$1"
    else
        tar -zxf "$1" -C "$2"
    fi
}

####
# burns given iso file
#
# @param string $1 - path to iso file
# @param string $2 - [optional] device to burn - default is cdrom
#
# @author stev leibelt
# @since 2013-02-12
####
function net_bazzline_burn ()
{
    if [[ $# -lt 1 ]]; then
        echo 'No valid argument supplied.'
        echo 'Try net_bazzline_burn $isoFile [$opticalDevice]'

        exit 1
    fi

    if [[ $# -eq 1 ]]; then
        sudo wodim -v dev=/dev/cdrom "$1"
    else
        sudo wodim -v dev=/dev/"$2" "$1"
    fi
}

####
# calles find with given param and type f
#
# @param string $1 - pattern you are searching for
# @param [string $2] - path to serching in
# @param [bool $3] - do not ignore dot files
#
# dot exclusion taken from: https://www.linuxquestions.org/questions/linux-general-1/find-and-excluding-all-hidden-directories-910578/
#
# @author stev leibelt
# @since 2013-03-08
####
function net_bazzline_find_file ()
{
    if [[ $# -eq 1 ]]; then
        find . -iname "$1" -not -path "*/.*/*" -not -name ".*" -type f 2>/dev/null
    elif [[ $# -eq 2 ]]; then
        find "$2"  -iname "$1" -not -path "*/.*/*" -not -name ".*" -type f 2>/dev/null
    elif [[ $# -eq 3 ]]; then
        find "$2" -iname "$1" -type f 2>/dev/null
    else
        echo 'No valid argument supplied.'
        return 1
    fi
}

####
# calles find with given param and type d
#
# @param string $1 - pattern your are searching for
# @param [string $2] - path to serching in
#
# @author stev leibelt
# @since 2013-03-08
####
function net_bazzline_find_directory ()
{
    if [[ $# -eq 1 ]]; then
        find . -iname "$1" -type d 2>/dev/null
    elif [[ $# -eq 2 ]]; then
        find "$2" -iname "$1" -type d 2>/dev/null
    else
        echo 'No valid argument supplied.'
        return 1
    fi
}

####
# refresh given interface
#
# @param string $1 - [optional] interface - default eth0
#
# @author stev leibelt
# @since 2013-04-30
####
function net_bazzline_refresh_interface ()
{
    if [[ $# -eq 0 ]]; then
        INTERFACE="eth0"
    else
        INTERFACE="$1"
    fi

    sudo ip link set $INTERFACE down
    sudo ip link set $INTERFACE up
    sudo dhcpcd $INTERFACE
}

####
# Show differences between two directories
#
# @param string $1 - path to first directory
# @param string $2 - path to second directory
# 
# @author stev leibelt <artodeto@arcor.de>
# @since 2013-05-21
function net_bazzline_diff_directory ()
{
    if [[ $# -eq 2 ]]; then
        diff -qr "$1" "$2" | sort
    else
        echo 'No valid argument supplied.'
        echo 'Try command directory1 directory2'
        return 1
    fi
}

####
# Takes a screenshot
# https://wiki.archlinux.org/index.php/Screenshot
#
# @param string $1 - [optional] filename with extension
#
# @author stev leiblt <artodeto@arcor.de>
# @since 2013-05-25
####
function net_bazzline_screenshot ()
{
    if [[ $# -eq 0 ]]; then
        FILENAME='screenshot.jpg'
    else
        FILENAME="$1"
    fi

    import -window root $FILENAME
}

####
# Creates code coverage report by using phpunit
#
# @param string $1 - [optional] directory where to store report
#                    default is "./report"
#
# @author stev leiblt <artodeto@arcor.de>
# @since 2013-06-13
####
function net_bazzline_phpunit_codecoverage ()
{
    if [[ $# -eq 1 ]]; then
        DIRECTORY_FOR_REPORT="$1"
    else
        DIRECTORY_FOR_REPORT='./report'
    fi

    phpunit --coverage-html $DIRECTORY_FOR_REPORT
}

####
# Uses rsync with ssh to copy data from remote to local host
#
# @param string $1 - remote user
# @param string $2 - remote host
# @param string $3 - source path on remote host
# @param string $4 - destination path on local host
#
# @author stev leibelt <artodeto@arcor.de>
# @since 2013-07-05
####
function net_bazzline_sync_from_host ()
{
    if [[ $# -eq 4 ]]; then
        USER="$1"
        HOST="$2"
        SOURCE="$3"
        DESTINATION="$4"
    else
        echo 'invalid number of variables provided'
        echo 'command user host source destination'
        return 1
    fi

    rsync -avz -e ssh $USER@$HOST:$SOURCE $DESTINATION
}

####
# Uses rsync with ssh to copy data from local to remote host
#
# @param string $1 - remote user
# @param string $2 - remote host
# @param string $3 - source path on local host
# @param string $4 - destination path on remote host
#
# @author stev leibelt <artodeto@arcor.de>
# @since 2013-07-05
####
function net_bazzline_sync_to_host ()
{
    if [[ $# -eq 4 ]]; then
        USER="$1"
        HOST="$2"
        SOURCE="$3"
        DESTINATION="$4"
    else
        echo 'invalid number of variables provided'
        echo 'command user host source destination'
        return 1
    fi

    rsync -avz -e ssh $SOURCE $USER@$HOST:$DESTINATION
}

####
# Converts all mp3s to wav in current directory
# taken from: https://wiki.archlinux.org/index.php/CD_Burning#Burning_an_audio_CD
#
# @author stev leibelt <artodeto@arcor.de>
# @since 2013-07-17
####
function net_bazzline_convert_mp3_to_wav ()
{
    for i in *.mp3; 
    do 
        lame --decode "$i" "$(basename "$i" .mp3)".wav;
    done
}

####
# Converts all m4as to wav in current directory
# taken from: http://www.togaware.com/linux/survivor/Convert_m4a.html
#
# @author stev leibelt <artodeto@arcor.de>
# @since 2013-07-17
####
function net_bazzline_convert_m4a_to_wav ()
{
    for i in *.m4a;
    do
        faad -f 1 -o "$i.wav" "$i"
    done
}

####
# Converts all wavs to mp3s in current directory
# taken from: https://www.linuxquestions.org/questions/linux-general-1/converting-m4a-to-mp3-170553/
#
# @author stev leibelt <artodeto@arcor.de>
# @since 2013-07-17
####
function net_bazzline_convert_wav_to_mp3 ()
{
    for i in *.wav;
    do
        lame --replaygain-accurate -v -h -b 192 "$i" "$i.mp3";
    done
}

####
# Replaces a string in all files in given path and below
# taken from: http://www.cyberciti.biz/faq/unix-linux-replace-string-words-in-many-files/
#
# @author stev leibelt <artodeto@arcor.de>
# @since 2013-7-30
####
function net_bazzline_replace_string_in_files ()
{
    if [[ $# -lt 3 ]]; then
        echo 'invalid number of variavles provided'
        echo 'command search replace fileextension [path]'
        return 1
    fi

    SEARCH="$1"
    REPLACE="$2"
    FILE_EXTENSION="$3"

    if [[ $# -eq 4 ]]; then
        PATH="$4"
    else
        PATH='.'
    fi

    find $PATH -name '*.'$FILE_EXTENSION | xargs sed -i 's/'$SEARCH'/'$REPLACE'/g'
}
