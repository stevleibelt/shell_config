#!/bin/bash
NET_BAZZLINE_FUNCTION_PACKAGEMANAGER_SYSTEM_UPGRADE_SCREEN_SESSION_NAME='system_upgrade'

#a

####
# @param: <string> packagemanager_command
# [@param: <int> is_lts_kernel = 1]
# [@param: <int> skip_kernel_packages = 1]
####
function net_bazzline_packagemanager_arch_linux_software_upgrade ()
{
    #bo: setup
    if [[ $# -lt 1 ]];
    then
        echo ":: Invalid amount of arguments provided."
        echo "   ${FUNCNAME[0]} <packagemanager_command: sudo pacman | yay> [<is_lts_kernel>: 0|1] [<skip_kernel_packages>: 0|1]"

        return 1;
    fi

    local CURRENT_DATETIME
    local CURRENT_TIMESTAMP
    local IS_LTS_KERNEL
    local LAST_SYSTEM_UPDATE_FILE_PATH
    local LOG_FILE_PATH
    local PACKAGEMANAGER_COMMAND
    local PACKGES_TO_IGNORE
    local PACMAN_LOCK_FILE_PATH
    local SKIP_KERNEL_PACKAGES
    local UPGRADE_SCRIPT_FILE_PATH
    local ZFS_SNAPSHOT_NAME

    IS_LTS_KERNEL="${2:-1}"
    LOG_FILE_PATH="/var/log/pacman.log"
    PACKAGEMANAGER_COMMAND="${1}"
    PACMAN_LOCK_FILE_PATH='/var/lib/pacman/db.lck'
    SKIP_KERNEL_PACKAGES="${3:-1}"
    UPGRADE_SCRIPT_FILE_PATH="/tmp/net_bazzline_system_upgrade.sh"
    ZFS_SNAPSHOT_NAME='net_bazzline_before_system_upgrade'

    #@todo: @see: https://github.com/archzfs/archzfs/issues/446#issuecomment-1103320350
    #implement something like this: pacman -Syyu $(for i in {zfs-,}{nvidia,linux}{,-lts,-hardened,-zen}{,-headers}; do echo --ignore $i; done)
    if [[ ${IS_LTS_KERNEL} -eq 0 ]];
    then
      PACKGES_TO_IGNORE="linux-lts,linux-lts-headers,zfs-linux-lts,zfs-utils"
    else
      PACKGES_TO_IGNORE="linux,linux-headers,zfs-linux,zfs-utils"
    fi
    #eo: setup

    #bo: check if packagemanager is valid
    if [[ "${PACKAGEMANAGER_COMMAND}" != "sudo pacman"  &&  ! -x $(command -v "${PACKAGEMANAGER_COMMAND}") ]];
    then
        echo ":: Invalid argument provided."
        echo "   Command >>${PACKAGEMANAGER_COMMAND}<< does not exist."

        return 2;
    fi
    #eo: check if packagemanager is valid

    #bo: check if lock file exists
    if [[ -f ${PACMAN_LOCK_FILE_PATH} ]];
    then
        read -p -r ":: Lockfile exists. Remove it? (y|N) " yn

        case ${yn} in
            [Yy]* )
              echo "   Removing lock file."
              sudo rm ${PACMAN_LOCK_FILE_PATH}
              break;;
            * )
              echo "   Aborting.";
              return 2;
        esac
    fi
    #bo: check if lock file exists

    #bo: snapshot creation
    if [[ ${NET_BAZZLINE_ZFS_IS_AVAILABLE} -eq 1 ]];
    then
      if zfs list -t snapshot | grep -q "${ZFS_SNAPSHOT_NAME}";
      then
        if sudo zfs destroy -r "${NET_BAZZLINE_ZFS_DEFAULT_POOL}@${ZFS_SNAPSHOT_NAME}";
        then
          echo "   Removed snapshot >>${ZFS_SNAPSHOT_NAME}<<."
        else
          echo ":: Error"
          echo "   Could not destory snapshot >>${NET_BAZZLINE_ZFS_DEFAULT_POOL}@${ZFS_SNAPSHOT_NAME}<<."
        
          return 30;
        fi
      fi

        if sudo zfs snapshot -r "${NET_BAZZLINE_ZFS_DEFAULT_POOL}@${ZFS_SNAPSHOT_NAME}";
        then
          echo "   Zfs snapshot >>${ZFS_SNAPSHOT_NAME}<< created."
        else
          echo ":: Error"
          echo "   Could not create snapshot >>${NET_BAZZLINE_ZFS_DEFAULT_POOL}@${ZFS_SNAPSHOT_NAME}"

          return 32;
        fi
    fi

    #bo: check last system update timestamp
    CURRENT_DATETIME=$(date +'%Y-%m-%d %H:%M:%S')
    CURRENT_TIMESTAMP=$(date +'%s')
    LAST_SYSTEM_UPDATE_FILE_PATH="${NET_BAZZLINE_CACHE_PATH}/last_system_update"

    if [[ -f "${LAST_SYSTEM_UPDATE_FILE_PATH}" ]];
    then
        local LAST_SYSTEM_UPDATE_TIMESTAMP
        local LAST_VALID_TIMESTAMP

        LAST_SYSTEM_UPDATE_TIMESTAMP=$(head -n 4 "${LAST_SYSTEM_UPDATE_FILE_PATH}" | tail -n 1)
        LAST_VALID_TIMESTAMP=$(("${CURRENT_TIMESTAMP}" - 1209600))   #86400 (sec/day) * 14 (day) = 1209600 (sec)

        if [[ ${LAST_SYSTEM_UPDATE_TIMESTAMP} -lt ${LAST_VALID_TIMESTAMP} ]];
        then
            bash -c "${PACKAGEMANAGER_COMMAND} -S archlinux-keyring"
        fi
    else
        if [[ ! -d "${NET_BAZZLINE_CACHE_PATH}" ]];
        then
            mkdir -p "${NET_BAZZLINE_CACHE_PATH}"
        fi
    fi 

    cat > "${LAST_SYSTEM_UPDATE_FILE_PATH}" <<DELIM
#!/bin/bash
#last system update datetime
${CURRENT_DATETIME}
#last system update timestamp
${CURRENT_TIMESTAMP}
DELIM
    #eo: check last system update timestamp

    #bo: log file cleanup
    echo ":: Truncating >>${LOG_FILE_PATH}<<"
    sudo truncate -s 0 ${LOG_FILE_PATH}
    #eo: log file cleanup

    #bo: check if screen session exists
    net_bazzline_packagemanager_check_if_system_upgrade_screen_session_exists

    if  [[ ${?} -eq 1 ]];
    then
      #bo: upgrade script generation
      echo ":: Generating >>${UPGRADE_SCRIPT_FILE_PATH}<<"
      
      if [[ ${SKIP_KERNEL_PACKAGES} -eq 0 ]];
      then
        cat > ${UPGRADE_SCRIPT_FILE_PATH} <<DELIM
#!/bin/bash
echo ":: Trying upgrade with ignoring following packages >>${PACKGES_TO_IGNORE}<<"

if ${PACKAGEMANAGER_COMMAND} -Syyu --ignore=${PACKGES_TO_IGNORE};
then
  echo ":: Cleaning up" 
  ${PACKAGEMANAGER_COMMAND} -Sc
else
  echo ":: Something bad happens."
  read -n 1 -s -r -p "Press any key to continue"
fi

echo ":: Waiting for 30 seconds."
echo " Hit CTRL+C to terminate this waiting."
sleep 30
DELIM
    else
        cat > ${UPGRADE_SCRIPT_FILE_PATH} <<DELIM
#!/bin/bash
echo ":: Trying default upgrade"

${PACKAGEMANAGER_COMMAND} -Syyu

if [[ ${?} -ne 0 ]];
then
  echo ":: Ignoring zfs packages";
  echo "   Ignoring packages >>${PACKGES_TO_IGNORE}<<";

  if ${PACKAGEMANAGER_COMMAND} -Syyu --ignore=${PACKGES_TO_IGNORE};
  then
    echo ":: Cleaning up" 
    ${PACKAGEMANAGER_COMMAND} -Sc
  else
    echo ":: Something bad happens.";
    read -n 1 -s -r -p "Press any key to continue"
  fi

  echo ":: Waiting for 30 seconds."
  echo " Hit CTRL+C to terminate this waiting."

  sleep 30
fi
DELIM
      fi
      #eo: upgrade script generation
      
      screen -dmS ${NET_BAZZLINE_FUNCTION_PACKAGEMANAGER_SYSTEM_UPGRADE_SCREEN_SESSION_NAME} bash ${UPGRADE_SCRIPT_FILE_PATH}
    fi

    #this line is working because we make sure that there is a screen session or we create one above this line
    screen -r ${NET_BAZZLINE_FUNCTION_PACKAGEMANAGER_SYSTEM_UPGRADE_SCREEN_SESSION_NAME}

    echo ":: Runtime information"
    echo "   System upgrade logged: >>${LOG_FILE_PATH}<<."
    echo "   Executed upgrade script: >>${UPGRADE_SCRIPT_FILE_PATH}<<"
    if [[ ${NET_BAZZLINE_ZFS_IS_AVAILABLE} -eq 1 ]];
    then
      echo "   ZFS Snapshotname before upgrade: >>${ZFS_SNAPSHOT_NAME}<<"
    fi
    #eo: check if screen session exists
}

####
# @param: <string> packagemanager_command
####
function net_bazzline_packagemanager_apt_software_upgrade ()
{
    #bo: setup
    if [[ $# -lt 1 ]];
    then
        echo ":: Invalid amount of arguments provided."
        echo "   ${FUNCNAME[0]} <packagemanager_command: apt-get update && apt-get upgrade"

        return 1;
    fi

    local PACKAGEMANAGER_COMMAND="${1}"
    #eo: setup

    #bo: check if screen session exists
    net_bazzline_packagemanager_check_if_system_upgrade_screen_session_exists

    if  [[ $? -eq 1 ]];
    then
        screen -dmS ${NET_BAZZLINE_FUNCTION_PACKAGEMANAGER_SYSTEM_UPGRADE_SCREEN_SESSION_NAME} bash -c "${PACKAGEMANAGER_COMMAND}; echo \":: Waiting for 30 seconds.\"; echo \" Hit CTRL+C to terminate this waiting. \"; sleep 30"
    fi

    screen -r ${NET_BAZZLINE_FUNCTION_PACKAGEMANAGER_SYSTEM_UPGRADE_SCREEN_SESSION_NAME}
}

#c

function net_bazzline_packagemanager_check_if_system_upgrade_screen_session_exists ()
{
    #grep -q will exit with an code != 0 if there is no running screen session.
    screen -ls | grep -q ${NET_BAZZLINE_FUNCTION_PACKAGEMANAGER_SYSTEM_UPGRADE_SCREEN_SESSION_NAME}
}
